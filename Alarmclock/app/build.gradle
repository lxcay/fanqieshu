apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        //这里是修改包名的
        applicationId "com.xscz.alarmclock"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 2
        versionName "fanqieshu"
    }

    //    //签名
//    signingConfigs {
//        debug {
////            storeFile file("C:/Users/lizhen/.android/debug.keystore")
//        }
//        release {
//            storeFile file("./key/android.keystore")      //签名文件
//            storePassword KEYSTORE_PASSWORD     //看gradle.properties
//            keyAlias "onedollar"
//            keyPassword KEY_PASSWORD  //签名密码
//        }
//    }


    buildTypes {
        debug{
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"

            minifyEnabled false
            shrinkResources false
//            proguardFiles getDefaultProguardFile('proguard-project.txt'), 'proguard-project-debug.txt'
//            //签名
//            signingConfig signingConfigs.debug
        }
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled false
            // 移除无用的resource文件
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            //签名
//            signingConfig signingConfigs.relealse
        }
    }

    //批量打包
    flavors()


//    //so文件引入,变成一个jar
//    task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
//        destinationDir file("$projectDir/libs")
//        baseName "Native_Libs2"
//        extension "jar"
//        from fileTree(dir: "libs", include: "**/*.so")
//        into "lib"
//    }
//
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn(nativeLibsToJar)
//    }

//      //afterEvaluate，你可以理解为在配置阶段要结束，项目评估完会走到这一步。
//    afterEvaluate {
//        android.applicationVariants.each { variant ->
//            String buildTypeName = variant.buildType.name
//            File apkFile = null
//
//            variant.outputs.each { output ->
//                def file = output.outputFile
//                String prefix = android.defaultConfig.versionName
//
//                StringBuilder sb = new StringBuilder().append(prefix).append("_").append(buildTypeName)
//                sb.append("_").append("v").append(android.defaultConfig.versionCode)
//                sb.append(".apk")
//                String fileName = sb.toString()
//
//                println "versionCode=" + android.defaultConfig.versionCode + ",,,fileName=" + fileName
//                apkFile = new File(file.parent, fileName)
//                output.outputFile = apkFile
//            }
//        }
//    }
    // 忽略lint错误提示
    lintOptions {
        abortOnError false
    }
}
////    如果想打印这个task ，在 terminal 输入 gradle hello
//    task hello << {
//        println 'hello world!'
//    }

def flavors() {
    def path = '../channel.txt' //channel.txt的路径
    file(path).eachLine {
        line ->
            if(!line.startsWith("//")) {
                //动态创建productFlavor
                android.productFlavors.create(line, {
//                    //这3个字段是可配的
//                    versionCode = 10200000
//                    versionName = "1.2.0."
//                    applicationId 'com.cmplay.tiles2'
//                    //这里是举个栗子，如果渠道是百度渠道
//                    if (line == "channel-baidu") {
//                        applicationId 'com.xscz.alarmclock.baidu'
//                    }else{
//
//                    }
                    manifestPlaceholders = [channel_param: name]
                })
            }
    }
//    直接执行 ./gradlew assembleRelease ， 然后就可以静静的喝杯咖啡等待打包完成吧。
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    //只在编译时使用，不打到apk包中
//    provided files('runtime/CMBilling.jar')
}
